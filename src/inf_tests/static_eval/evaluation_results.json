{
  "model_path": "../outputs-full/checkpoint-110",
  "temperature": 1.0,
  "max_new_tokens": 1000,
  "total_evaluations": 5,
  "successful_evaluations": 5,
  "average_codebleu": 0.31961688556803747,
  "results": [
    {
      "prompt_file": "prompt1.txt",
      "ref_file": "ref1.java",
      "prompt": "Write complete Java code for a simple Library Management System with the following:\n1. A class `Book` with fields: `title`, `author`, and `isbn`, plus a constructor, getters, and a `toString` method.\n2. A class `Library` that stores a `List<Book>` and has:\n   - `addBook(Book book)`\n   - `removeBookByIsbn(String isbn)`\n   - `findBookByTitle(String title)` which returns a Book or null\n3. A `Main` class with a `main` method that:\n   - Creates a Library\n   - Adds at least two books\n   - Finds a book by title and prints it\n   - Removes a book by ISBN\n   - Prints remaining books\nThe code should be fully self-contained in one file, but still contain these three separate classes.",
      "prediction": "",
      "reference": "import java.util.ArrayList;\nimport java.util.List;\n\nclass Book {\n    private String title;\n    private String author;\n    private String isbn;\n\n    public Book(String title, String author, String isbn) {\n        this.title = title;\n        this.author = author;\n        this.isbn = isbn;\n    }\n\n    public String getTitle() {\n        return title;\n    }\n\n    public String getAuthor() {\n        return author;\n    }\n\n    public String getIsbn() {\n        return isbn;\n    }\n\n    @Override\n    public String toString() {\n        return title + \" by \" + author + \" (ISBN: \" + isbn + \")\";\n    }\n}\n\nclass Library {\n    private List<Book> books = new ArrayList<>();\n\n    public void addBook(Book book) {\n        books.add(book);\n    }\n\n    public boolean removeBookByIsbn(String isbn) {\n        return books.removeIf(b -> b.getIsbn().equals(isbn));\n    }\n\n    public Book findBookByTitle(String title) {\n        for (Book b : books) {\n            if (b.getTitle().equalsIgnoreCase(title)) {\n                return b;\n            }\n        }\n        return null;\n    }\n\n    public List<Book> getBooks() {\n        return books;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Library library = new Library();\n        library.addBook(new Book(\"1984\", \"George Orwell\", \"12345\"));\n        library.addBook(new Book(\"Brave New World\", \"Aldous Huxley\", \"67890\"));\n\n        Book found = library.findBookByTitle(\"1984\");\n        if (found != null) {\n            System.out.println(\"Found: \" + found);\n        }\n\n        library.removeBookByIsbn(\"12345\");\n\n        System.out.println(\"Remaining books:\");\n        for (Book b : library.getBooks()) {\n            System.out.println(b);\n        }\n    }\n}",
      "scores": {
        "codebleu": 0.25,
        "ngram_match_score": 0,
        "weighted_ngram_match_score": 0,
        "syntax_match_score": 0.0,
        "dataflow_match_score": 0.0
      }
    },
    {
      "prompt_file": "prompt2.txt",
      "ref_file": "ref2.java",
      "prompt": "Write complete Java code with:\n1. Class `Account` with fields: `accountNumber`, `owner`, `balance` and methods:\n   - `deposit(double amount)`\n   - `withdraw(double amount)` (no overdraft allowed)\n   - `toString()` for account details\n2. Class `Bank` that manages multiple `Account` objects in a list:\n   - `addAccount(Account account)`\n   - `findAccount(String accountNumber)`\n   - `transfer(String fromAccount, String toAccount, double amount)`\n3. A `Main` class to:\n   - Create two accounts\n   - Deposit and withdraw money\n   - Transfer money between accounts\n   - Print final balances\nAll in one file.",
      "prediction": "import java.util.ArrayList;\nimport java.util.List;\n\nclass Account {\n    String accountNumber;\n    String owner;\n    double balance;\n\n    Account(String accountNumber, String owner, double balance) {\n        this.accountNumber = accountNumber;\n        this.owner = owner;\n        this.balance = balance;\n    }\n\n    void deposit(double amount) {\n        this.balance += amount;\n    }\n\n    void withdraw(double amount) {\n        if (amount > this.balance)\n            throw new Error(\"Invalid withdraw transaction: insufficient funds\");\n        this.balance -= amount;\n    }\n\n    String toString() {\n        return \"Account{\" +\n            \"accountNumber='\" + accountNumber + '\\'' +\n            \", owner='\" + owner + '\\'' +\n            \", balance=\" + balance +\n            '}';\n    }\n}\n\nclass Bank {\n    private List<Account> accountList = new ArrayList<>();\n\n    void addAccount(Account account) {\n        accountList.add(account);\n    }\n\n    Account findAccount(String accountNumber) {\n        for (Account account : accountList) {\n            if (account.accountNumber.equals(accountNumber)) {\n                return account;\n            }\n        }\n        return null;\n    }\n\n    public void transfer(String fromAccount, String toAccount, double amount) {\n        Account fromAccountObject = this.findAccount(fromAccount);\n        Account toAccountObject = this.findAccount(toAccount);\n\n        if (fromAccountObject!= null) {\n            fromAccountObject.withdraw(amount);\n        } else {\n            throw new Error(\"Invalid from account number\");\n        }\n\n        if (toAccountObject!= null) {\n            toAccountObject.deposit(amount);\n        } else {\n            throw new Error(\"Invalid to account number\");\n        }\n    }\n\n    public String toString() {\n        StringBuilder str = new StringBuilder();\n        for (Account account : accountList) {\n            str.append(account.toString()).append(\"\\n\");\n        }\n        return str.toString();\n    }\n}\n\nclass Main {\n    public static void main(String[] args) {\n        Bank bank = new Bank();\n        Account account1 = new Account(\"A123\", \"Owner 1\", 1000);\n        Account account2 = new Account(\"B456\", \"Owner 2\", 2000);\n\n        bank.addAccount(account1);\n        bank.addAccount(account2);\n\n        account1.deposit(500);\n        account1.withdraw(1000);\n\n        account2.withdraw(1000);\n        account2.deposit(500);\n\n        bank.transfer(\"A123\", \"B456\", 1000);\n        bank.transfer(\"B456\", \"A123\", 1000);\n\n        System.out.println(bank.toString());\n    }\n}",
      "reference": "import java.util.ArrayList;\nimport java.util.List;\n\nclass Account {\n    private String accountNumber;\n    private String owner;\n    private double balance;\n\n    public Account(String accountNumber, String owner, double balance) {\n        this.accountNumber = accountNumber;\n        this.owner = owner;\n        this.balance = balance;\n    }\n\n    public void deposit(double amount) {\n        balance += amount;\n    }\n\n    public boolean withdraw(double amount) {\n        if (amount <= balance) {\n            balance -= amount;\n            return true;\n        }\n        return false;\n    }\n\n    public String getAccountNumber() {\n        return accountNumber;\n    }\n\n    public double getBalance() {\n        return balance;\n    }\n\n    @Override\n    public String toString() {\n        return owner + \" (\" + accountNumber + \"): $\" + balance;\n    }\n}\n\nclass Bank {\n    private List<Account> accounts = new ArrayList<>();\n\n    public void addAccount(Account account) {\n        accounts.add(account);\n    }\n\n    public Account findAccount(String accountNumber) {\n        for (Account a : accounts) {\n            if (a.getAccountNumber().equals(accountNumber)) {\n                return a;\n            }\n        }\n        return null;\n    }\n\n    public boolean transfer(String fromAccount, String toAccount, double amount) {\n        Account from = findAccount(fromAccount);\n        Account to = findAccount(toAccount);\n        if (from != null && to != null && from.withdraw(amount)) {\n            to.deposit(amount);\n            return true;\n        }\n        return false;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Bank bank = new Bank();\n        bank.addAccount(new Account(\"001\", \"Alice\", 500));\n        bank.addAccount(new Account(\"002\", \"Bob\", 300));\n\n        bank.findAccount(\"001\").deposit(200);\n        bank.findAccount(\"002\").withdraw(50);\n        bank.transfer(\"001\", \"002\", 100);\n\n        System.out.println(bank.findAccount(\"001\"));\n        System.out.println(bank.findAccount(\"002\"));\n    }\n}",
      "scores": {
        "codebleu": 0.5342812338254981,
        "ngram_match_score": 0.342447281216892,
        "weighted_ngram_match_score": 0.3936831004502436,
        "syntax_match_score": 0.6048780487804878,
        "dataflow_match_score": 0.7961165048543689
      }
    },
    {
      "prompt_file": "prompt3.txt",
      "ref_file": "ref3.java",
      "prompt": "Write Java code with:\n1. Class `Student` (id, name, grades list) and methods:\n   - `addGrade(double grade)`\n   - `getAverage()`\n2. Class `School` that stores students and can:\n   - Add students\n   - Find student by ID\n3. Main to:\n   - Create students\n   - Add grades\n   - Print averages\nAll in one file.",
      "prediction": "package com.example.java;\npublic class Class {\n\n    private int id;\n    private String name;\n    private List<String> grades;\n\n    public int getId() {\n        return id;\n    }\n\n    public void setId(int id) {\n        this.id = id;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public List<String> getGrades() {\n        return grades;\n    }\n\n    public void setGrades(List<String> grades) {\n        this.grades = grades;\n    }\n    public boolean addGrade(double grade){\n        boolean result;\n        if(grade>=0 && grade <=100) {\n            result = true;\n        }\n        else {\n            result = false;\n        }\n        return result;\n    }\n\n    public double getAverage(){\n        double sum = 0.0;\n        int size = 0;\n        double average;\n        for(String grade : grades) {\n            sum += Double.parseDouble(grade);\n            size++;\n        }\n        average = sum / size;\n        return average;\n    }\n\n\n    public static void main(String[] args) {\n        Student student = new Student();\n        student.setGradeList(Arrays.asList(\"90\", \"80\", \"70\"));\n\n    }\n}",
      "reference": "import java.util.ArrayList;\nimport java.util.List;\n\nclass Student {\n    private String id;\n    private String name;\n    private List<Double> grades = new ArrayList<>();\n\n    public Student(String id, String name) {\n        this.id = id;\n        this.name = name;\n    }\n\n    public void addGrade(double grade) {\n        grades.add(grade);\n    }\n\n    public double getAverage() {\n        if (grades.isEmpty()) return 0;\n        double sum = 0;\n        for (double g : grades) sum += g;\n        return sum / grades.size();\n    }\n\n    @Override\n    public String toString() {\n        return name + \" (\" + id + \") - Avg: \" + getAverage();\n    }\n}\n\nclass School {\n    private List<Student> students = new ArrayList<>();\n\n    public void addStudent(Student s) {\n        students.add(s);\n    }\n\n    public Student findStudent(String id) {\n        for (Student s : students) {\n            if (s.id.equals(id)) {\n                return s;\n            }\n        }\n        return null;\n    }\n\n    public List<Student> getStudents() {\n        return students;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        School school = new School();\n        Student s1 = new Student(\"S001\", \"John\");\n        Student s2 = new Student(\"S002\", \"Jane\");\n\n        s1.addGrade(90);\n        s1.addGrade(85);\n        s2.addGrade(78);\n        s2.addGrade(88);\n\n        school.addStudent(s1);\n        school.addStudent(s2);\n\n        for (Student s : school.getStudents()) {\n            System.out.println(s);\n        }\n    }\n}",
      "scores": {
        "codebleu": 0.2531513382721699,
        "ngram_match_score": 0.14507301012120025,
        "weighted_ngram_match_score": 0.15618460947189058,
        "syntax_match_score": 0.4797687861271676,
        "dataflow_match_score": 0.23157894736842105
      }
    },
    {
      "prompt_file": "prompt4.txt",
      "ref_file": "ref4.java",
      "prompt": "Java code with:\n1. Class `Task` (id, description, completed flag)\n2. Class `TaskManager`:\n   - Add task\n   - Mark complete\n   - List tasks\n3. Main to:\n   - Add tasks\n   - Mark one as complete\n   - Print all tasks",
      "prediction": "package com.ramboll.oss.testapp;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Task {\n    private final int id;\n    private final String description;\n    private boolean completed;\n\n    public Task(int id, String description) {\n        this.id = id;\n        this.description = description;\n        this.completed = false;\n    }\n\n    public int getId() {\n        return id;\n    }\n\n    public String getDescription() {\n        return description;\n    }\n\n    public void setCompleted(boolean completed) {\n        this.completed = completed;\n    }\n\n    public boolean isCompleted() {\n        return completed;\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass()!= o.getClass()) return false;\n\n        Task task = (Task) o;\n\n        return id == task.id && description!= null? description.equals(task.description) : task.description!= null;\n    }\n}\n\nclass TaskManager {\n\n    public void addTask(int taskId, String taskDescription) {\n        // Add task\n        // 1. Create Task object with the taskId and taskDescription\n        // 2. Add task to a List by using TaskManager class's addTask method\n    }\n\n    public void markTaskCompleted(int taskId) {\n        // Mark task as completed\n        // 1. Get a Task object for the taskId from a List using TaskManager class's getTask method\n        // 2. Call setCompleted(true) on the Task object\n    }\n\n    public List<Task> listTasks() {\n        // List tasks\n        // 1. Create a List by using TaskManager class's initializeTasksList method\n        // 2. Add task objects by using TaskManager class's addTask method\n        // 3. Pass the List to the taskList field\n        return taskList;\n    }\n\n}",
      "reference": "import java.util.ArrayList;\nimport java.util.List;\n\nclass Task {\n    private int id;\n    private String description;\n    private boolean completed;\n\n    public Task(int id, String description) {\n        this.id = id;\n        this.description = description;\n        this.completed = false;\n    }\n\n    public void complete() {\n        this.completed = true;\n    }\n\n    @Override\n    public String toString() {\n        return id + \": \" + description + \" [\" + (completed ? \"Done\" : \"Pending\") + \"]\";\n    }\n}\n\nclass TaskManager {\n    private List<Task> tasks = new ArrayList<>();\n\n    public void addTask(Task t) {\n        tasks.add(t);\n    }\n\n    public void markComplete(int id) {\n        for (Task t : tasks) {\n            if (t.id == id) {\n                t.complete();\n            }\n        }\n    }\n\n    public List<Task> getTasks() {\n        return tasks;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        TaskManager tm = new TaskManager();\n        tm.addTask(new Task(1, \"Write Code\"));\n        tm.addTask(new Task(2, \"Review PR\"));\n\n        tm.markComplete(1);\n\n        for (Task t : tm.getTasks()) {\n            System.out.println(t);\n        }\n    }\n}",
      "scores": {
        "codebleu": 0.39389268801490473,
        "ngram_match_score": 0.19144285484618637,
        "weighted_ngram_match_score": 0.30994462088367675,
        "syntax_match_score": 0.4676258992805755,
        "dataflow_match_score": 0.6065573770491803
      }
    },
    {
      "prompt_file": "prompt5.txt",
      "ref_file": "ref5.java",
      "prompt": "Java program with:\n1. Class `Item` (name, quantity, price)\n2. Class `Inventory`:\n   - Add item\n   - Remove item\n   - Calculate total value\n3. Main to:\n   - Add items\n   - Remove one\n   - Print total value",
      "prediction": "public class Inventory {\n        private final List<Item> items;\n        private final int priceMultiplier;\n\n        public Inventory(int priceMultiplier) {\n            this.priceMultiplier = priceMultiplier;\n            this.items = new ArrayList<>();\n        }\n\n        public void addItem(String name, int quantity, int price) {\n            items.add(new Item(name, quantity, price * priceMultiplier));\n        }\n\n        public void removeItem(String name, int quantity) {\n            items.remove(new Item(name, quantity, 0));\n        }\n\n        public int getTotalValue() {\n            return items.stream()\n               .mapToInt((Item item) -> item.getTotalValue())\n               .sum();\n        }\n    }",
      "reference": "import java.util.ArrayList;\nimport java.util.List;\n\nclass Item {\n    private String name;\n    private int quantity;\n    private double price;\n\n    public Item(String name, int quantity, double price) {\n        this.name = name;\n        this.quantity = quantity;\n        this.price = price;\n    }\n\n    public double getTotalValue() {\n        return quantity * price;\n    }\n\n    @Override\n    public String toString() {\n        return name + \" x\" + quantity + \" @ $\" + price;\n    }\n}\n\nclass Inventory {\n    private List<Item> items = new ArrayList<>();\n\n    public void addItem(Item item) {\n        items.add(item);\n    }\n\n    public boolean removeItem(String name) {\n        return items.removeIf(i -> i.name.equals(name));\n    }\n\n    public double getTotalInventoryValue() {\n        double total = 0;\n        for (Item i : items) total += i.getTotalValue();\n        return total;\n    }\n\n    public List<Item> getItems() {\n        return items;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Inventory inv = new Inventory();\n        inv.addItem(new Item(\"Laptop\", 2, 1000));\n        inv.addItem(new Item(\"Mouse\", 5, 25));\n\n        inv.removeItem(\"Mouse\");\n\n        System.out.println(\"Inventory:\");\n        for (Item i : inv.getItems()) {\n            System.out.println(i);\n        }\n        System.out.println(\"Total value: $\" + inv.getTotalInventoryValue());\n    }\n}",
      "scores": {
        "codebleu": 0.16675916772761462,
        "ngram_match_score": 0.02884029702447243,
        "weighted_ngram_match_score": 0.050848812910376344,
        "syntax_match_score": 0.33125,
        "dataflow_match_score": 0.25609756097560976
      }
    }
  ]
}